{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "assets/js/admin/general-page/main.js",
    "assets/js/admin/general-page/utils/ExportTerms.js",
    "assets/js/admin/general-page/views/ExportButton.js",
    "assets/js/admin/general-page/views/Page.js",
    "assets/js/admin/general-page/views/PostAuthorId.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/* global jQuery, Backbone */\n\nvar setkaWorkflowAdminGeneralPage = {};\n\n// Store everything globally\nwindow.setkaWorkflowAdminGeneralPage = setkaWorkflowAdminGeneralPage;\n\nsetkaWorkflowAdminGeneralPage.views = {\n    Page: require('./views/Page'),\n    ExportButton: require('./views/ExportButton'),\n    PostAuthorId: require('./views/PostAuthorId')\n};\n\nsetkaWorkflowAdminGeneralPage.utils = {\n    ExportTerms: require('./utils/ExportTerms')\n};\n",
    "/* global jQuery, Backbone, module */\nvar\n    $       = jQuery,\n    config  = window.setkaWorkflowAdminGeneralPageConfig;\n\nmodule.exports = Backbone.View.extend({\n\n    _waitResponse: false,\n\n    initialize: function() {\n        _.bindAll(this, 'done', 'fail');\n    },\n\n    exportTerm: function() {\n\n        // Don'make request if previous not finished.\n        if(this._waitResponse) {\n            return this;\n        }\n\n        // Make request.\n        var xhr = $.ajax({\n            url: window.ajaxurl,\n            type: 'post',\n            timeout: 45000, // throw an error if not completed after 15 sec.\n            data: {\n                action: config.action,\n                actionName: config.actionExportCategories\n            },\n            // We awaiting JSON response from WordPress\n            dataType: 'json',\n            jsonp: false,\n            cache: false\n        })\n            .done(this.done)\n            .fail(this.fail);\n\n        this._waitResponse = true;\n    },\n\n    done: function(data, textStatus, jqXHR) {\n        this._waitResponse = false;\n        Backbone.trigger('setka:workflow:exportTerm:done', data, textStatus, jqXHR);\n    },\n\n    fail: function (jqXHR, textStatus, errorThrown) {\n        this._waitResponse = false;\n        Backbone.trigger('setka:workflow:exportTerm:fail', jqXHR, textStatus, errorThrown);\n    }\n});\n",
    "/* global jQuery, Backbone, module */\nvar\n    adapter      = window.setkaWorkflowAdminGeneralPage,\n    $            = jQuery,\n    config       = window.setkaWorkflowAdminGeneralPageConfig,\n    translations = window.setkaWorkflowAdminGeneralPageConfig.translations;\n\nmodule.exports = Backbone.View.extend({\n\n    disable: function() {\n        this.$el.attr('disabled', 'disabled');\n        return this;\n    },\n\n    enable: function() {\n        this.$el.removeAttr('disabled');\n        return this;\n    }\n});\n",
    "/* global jQuery, Backbone, module */\nvar\n    adapter      = window.setkaWorkflowAdminGeneralPage,\n    $            = jQuery,\n    config       = window.setkaWorkflowAdminGeneralPageConfig,\n    translations = window.setkaWorkflowAdminGeneralPageConfig.translations;\n\nmodule.exports = Backbone.View.extend({\n\n    views: {},\n\n    utils: {},\n\n    DOM: {\n        exportButton: null,\n        postAuthorId: null,\n        errors: null,\n        log: null,\n        progress: null\n    },\n\n    initialize: function() {\n        _.bindAll(this, 'onExportButtonClick', 'onExported', 'onExportFailed', 'exportTerm');\n        this\n            .setupDOM()\n            .setupUtils()\n            .addEvents();\n    },\n\n    setupDOM: function() {\n\n        this.DOM.exportButton = new adapter.views.ExportButton({\n            el: config.elements.exportButton,\n            model: this.model\n        });\n\n        this.DOM.postAuthorId = new adapter.views.PostAuthorId({\n           model: this.model\n        });\n\n        this.DOM.errors       = $(config.elements.exportErrors);\n        this.DOM.log          = $(config.elements.exportLog);\n\n        return this;\n    },\n\n    setupUtils: function() {\n        this.utils.exportTerms = new adapter.utils.ExportTerms();\n\n        return this;\n    },\n\n    addEvents: function() {\n        this.DOM.exportButton.$el.click(this.onExportButtonClick);\n\n        Backbone.on('setka:workflow:exportTerm:done', this.onExported);\n        Backbone.on('setka:workflow:exportTerm:fail', this.onExportFailed);\n\n        return this;\n    },\n\n    onExportButtonClick: function(event) {\n        event.preventDefault();\n\n        this\n            .initialExport()\n            .exportTerm();\n    },\n\n    /**\n     * Runs the progress bar filled to 100% with animation.\n     */\n    initialExport: function() {\n\n        // Disable export button.\n        this.DOM.exportButton\n            .disable();\n\n        // Run progress bar with 100% fill.\n        this.DOM.progress = $(config.elements.exportProgress)\n            .removeClass(config.elements.hidden)\n            .progressbar({value: false});\n\n        // Hide errors.\n        this.DOM.errors\n            .addClass(config.elements.hidden);\n\n        // Hide log.\n        this.DOM.log\n            .addClass(config.elements.hidden);\n\n        return this;\n    },\n\n    onExported: function(data, textStatus, jqXHR) {\n\n        if(data.stat.notCreated === 0) {\n            // If all terms exported hide progress bar.\n            this.DOM.progress\n                .addClass(config.elements.hidden);\n        } else {\n            // If queue is still full - update the progress bar value.\n            var process = (data.stat.created * 100) / data.stat.total;\n\n            // Minimum value.\n            if(process < 5) {\n                process = 5;\n            }\n\n            // Update progress bar.\n            this.DOM.progress\n                .removeClass(config.elements.hidden)\n                .progressbar({value: process});\n        }\n\n        // Show errors.\n        if(!_.isUndefined(data.errors)) {\n\n            // Insert errors into container.\n            _.each(data.errors, function(element, index, list) {\n                $(this.DOM.errors).text(element.message);\n            }, this);\n\n            // Enable errors container.\n            $(this.DOM.errors)\n                .removeClass(config.elements.hidden);\n\n        } else {\n            // Hide errors container.\n            $(this.DOM.errors)\n                .addClass(config.elements.hidden);\n        }\n\n        // Show result of operation.\n        if(!_.isUndefined(data.entity)) {\n\n            if(data.stat.notCreated === 0) {\n                // All terms exported.\n                $(this.DOM.log)\n                    .text(translations.exportSuccessfulFinished);\n            } else {\n                // There is more terms to export - show current progress.\n                $(this.DOM.log)\n                    .text(translations.exportedResult.replace('%1$s', data.entity.wordpress.name));\n            }\n\n            // Show result container.\n            $(this.DOM.log)\n                .removeClass(config.elements.hidden);\n        } else {\n            // Hide result container.\n            $(this.DOM.log)\n                .addClass(config.elements.hidden);\n        }\n\n        // If more terms exists lets export it.\n        if(data.stat.notCreated > 0 && _.isUndefined(data.errors)) {\n            // If more terms exists and no errors then export next one.\n            this.exportTerm();\n        } else {\n            // Disable progress.\n            this.DOM.progress\n                .addClass(config.elements.hidden);\n\n            // Enable export button.\n            this.DOM.exportButton\n                .enable();\n        }\n    },\n\n    onExportFailed: function(jqXHR, textStatus, errorThrown) {\n        // If export failed.\n\n        // Hide progress bar.\n        this.DOM.progress\n            .addClass(config.elements.hidden);\n\n        // Hide log.\n        this.DOM.log\n            .addClass(config.elements.hidden);\n\n        // Show connection error.\n        $(this.DOM.errors)\n            .text(translations.connectToWordPressError)\n            .removeClass(config.elements.hidden);\n\n        // Enable export button.\n        this.DOM.exportButton\n            .enable();\n    },\n\n    exportTerm: function() {\n        this.utils.exportTerms.exportTerm();\n        return this;\n    }\n});\n",
    "/* global jQuery, Backbone, module */\nvar\n    adapter      = window.setkaWorkflowAdminGeneralPage,\n    $            = jQuery,\n    config       = window.setkaWorkflowAdminGeneralPageConfig,\n    translations = window.setkaWorkflowAdminGeneralPageConfig.translations;\n\nmodule.exports = Backbone.View.extend({\n\n    el: config.elements.postAuthorId,\n\n    initialize: function() {\n        this.$el.select2({\n            ajax: {\n                url: ajaxurl,\n                dataType: 'json',\n                minimumInputLength: 3,\n                delay: 300,\n                allowClear: true,\n                data: function (params) {\n                    params.action = config.action;\n                    params.actionName = config.actionSearchUsers;\n                    return params;\n                }\n            }\n        });\n    }\n});\n"
  ]
}